services:
  haproxy:
    build:
      context: .
      dockerfile: ./haproxy/DockerFile
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mynetwork
    depends_on:
      - websocket-server-1
      - websocket-server-2
      - websocket-server-3
      - websocket-server-4


  websocket-server-1: 
    build:
      context: .
      dockerfile: ./websocket-server/DockerFile
    ports:
      - 1000:3000
    environment:
      - DATABASE_URL:${DATABASE_URL}
    volumes:
      - .:/app
    networks:
      - mynetwork
    depends_on:
      - chat-postgres

  websocket-server-2: 
    build:
      context: .
      dockerfile: ./websocket-server/DockerFile
    ports:
      - 1001:3000
    environment:
      - DATABASE_URL:${DATABASE_URL}
    volumes:
      - .:/app
    networks:
      - mynetwork
    depends_on:
      - chat-postgres

  websocket-server-3: 
    build:
      context: .
      dockerfile: ./websocket-server/DockerFile
    ports:
      - 1002:3000
    environment:
      - DATABASE_URL:${DATABASE_URL}
    volumes:
      - .:/app
    networks:
      - mynetwork
    depends_on:
      - chat-postgres
  
  websocket-server-4: 
    build:
      context: .
      dockerfile: ./websocket-server/DockerFile
    ports:
      - 1003:3000
    environment:
      - DATABASE_URL:${DATABASE_URL}
    volumes:
      - .:/app
    networks:
      - mynetwork
    depends_on:
      - chat-postgres

  redis-server:
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      - mynetwork

  chat-postgres:
    image: postgres:16.1
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - chat_vol:/var/lib/postgresql/data
    networks:
      - mynetwork

networks:
  mynetwork:

volumes:
  chat_vol:
    external: true
